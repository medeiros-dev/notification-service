// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/send-notification": {
            "post": {
                "description": "Receives notification details and queues them for delivery via specified channels.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Send Notification",
                "parameters": [
                    {
                        "description": "Notification Request Body",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sendnotification.SendNotificationInputDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sendnotification.SendNotificationOutputDTO"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"Invalid request payload: \u003cdetails\u003e\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Failed to process notification\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.UserProfile": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "preferred_language": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "sendnotification.Channel": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "sendnotification.MessageResponse": {
            "type": "object",
            "properties": {
                "channel_type": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "sendnotification.SendNotificationInputDTO": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sendnotification.Channel"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "user_profile": {
                    "$ref": "#/definitions/domain.UserProfile"
                }
            }
        },
        "sendnotification.SendNotificationOutputDTO": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sendnotification.MessageResponse"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Notification Producer API",
	Description:      "This is the API for the Notification Producer service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
